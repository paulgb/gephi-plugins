/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.paulbutler.gtfsloader;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JRadioButton;

/**
 *
 * @author paulbutler
 */
public class GTFSImporterOptionsSwing extends javax.swing.JPanel implements ActionListener {
    private final Map<GTFSTransitType, JCheckBox> typeToCheckBox;
    private final GTFSImporterOptionsPanel panel;
    private final EnumMap<EdgeAlgorithm, JRadioButton> algorithmToRadioBox;

    /**
     * Creates new form GTFSImporterOptionsSwing
     */
    public GTFSImporterOptionsSwing(GTFSImporterOptionsPanel panel) {
        initComponents();
        
        typeToCheckBox = new EnumMap<GTFSTransitType, JCheckBox>(GTFSTransitType.class);
        typeToCheckBox.put(GTFSTransitType.BUS, useBus);
        typeToCheckBox.put(GTFSTransitType.CABLE_CAR, useCableCar);
        typeToCheckBox.put(GTFSTransitType.FERRY, useFerry);
        typeToCheckBox.put(GTFSTransitType.FUNICULAR, useFunicular);
        typeToCheckBox.put(GTFSTransitType.GONDOLA, useGondola);
        typeToCheckBox.put(GTFSTransitType.LIGHT_RAIL, useLightRail);
        typeToCheckBox.put(GTFSTransitType.RAIL, useRail);
        typeToCheckBox.put(GTFSTransitType.SUBWAY, useSubway);
        
        algorithmToRadioBox = new EnumMap<EdgeAlgorithm, JRadioButton>(EdgeAlgorithm.class);
        algorithmToRadioBox.put(EdgeAlgorithm.DISTANCE, edgeDistance);
        algorithmToRadioBox.put(EdgeAlgorithm.SHAPES, edgeShapes);
        algorithmToRadioBox.put(EdgeAlgorithm.STOP_ORDER, edgeStopOrder);
        
        this.panel = panel;
        
        for (JCheckBox cb : typeToCheckBox.values()) {
            cb.addActionListener(this);
        }
        
        for (JRadioButton rb : algorithmToRadioBox.values()) {
            rb.addActionListener(this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        edgeStyleGroup = new javax.swing.ButtonGroup();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        edgeShapes = new javax.swing.JRadioButton();
        edgeDistance = new javax.swing.JRadioButton();
        edgeStopOrder = new javax.swing.JRadioButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        useLightRail = new javax.swing.JCheckBox();
        useSubway = new javax.swing.JCheckBox();
        useRail = new javax.swing.JCheckBox();
        useFerry = new javax.swing.JCheckBox();
        useCableCar = new javax.swing.JCheckBox();
        useGondola = new javax.swing.JCheckBox();
        useFunicular = new javax.swing.JCheckBox();
        selectNone = new javax.swing.JButton();
        selectAll = new javax.swing.JButton();
        useBus = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.jLabel1.text")); // NOI18N

        edgeStyleGroup.add(edgeShapes);
        edgeShapes.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(edgeShapes, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.edgeShapes.text")); // NOI18N
        edgeShapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeShapesActionPerformed(evt);
            }
        });

        edgeStyleGroup.add(edgeDistance);
        org.openide.awt.Mnemonics.setLocalizedText(edgeDistance, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.edgeDistance.text")); // NOI18N
        edgeDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDistanceActionPerformed(evt);
            }
        });

        edgeStyleGroup.add(edgeStopOrder);
        org.openide.awt.Mnemonics.setLocalizedText(edgeStopOrder, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.edgeStopOrder.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.jLabel2.text")); // NOI18N

        useLightRail.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useLightRail, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useLightRail.text")); // NOI18N

        useSubway.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useSubway, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useSubway.text")); // NOI18N

        useRail.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useRail, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useRail.text")); // NOI18N

        useFerry.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useFerry, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useFerry.text")); // NOI18N

        useCableCar.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useCableCar, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useCableCar.text")); // NOI18N

        useGondola.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useGondola, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useGondola.text")); // NOI18N

        useFunicular.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useFunicular, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useFunicular.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(selectNone, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.selectNone.text")); // NOI18N
        selectNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectNoneActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(selectAll, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.selectAll.text")); // NOI18N
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });

        useBus.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useBus, org.openide.util.NbBundle.getMessage(GTFSImporterOptionsSwing.class, "GTFSImporterOptionsSwing.useBus.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(edgeDistance)
                            .add(jLabel1)
                            .add(edgeShapes)
                            .add(edgeStopOrder)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(useLightRail)
                                    .add(useSubway)
                                    .add(useRail)
                                    .add(useBus))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(useFunicular)
                                    .add(useGondola)
                                    .add(useCableCar)
                                    .add(useFerry)))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(selectNone)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectAll)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(edgeShapes)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(edgeDistance)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(edgeStopOrder)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(useLightRail)
                    .add(useFerry))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(useSubway)
                    .add(useCableCar))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(useRail)
                    .add(useGondola))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(useFunicular)
                    .add(useBus))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectNone)
                    .add(selectAll))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void edgeShapesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeShapesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edgeShapesActionPerformed

    private void edgeDistanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDistanceActionPerformed

    }//GEN-LAST:event_edgeDistanceActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        for (JCheckBox checkbox : typeToCheckBox.values()) {
            checkbox.setSelected(true);
        }
        actionPerformed(evt);
    }//GEN-LAST:event_selectAllActionPerformed

    private void selectNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectNoneActionPerformed
        for (JCheckBox checkbox : typeToCheckBox.values()) {
            checkbox.setSelected(false);
        }
        actionPerformed(evt);
    }//GEN-LAST:event_selectNoneActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton edgeDistance;
    private javax.swing.JRadioButton edgeShapes;
    private javax.swing.JRadioButton edgeStopOrder;
    private javax.swing.ButtonGroup edgeStyleGroup;
    private javax.swing.JButton selectAll;
    private javax.swing.JButton selectNone;
    private javax.swing.JCheckBox useBus;
    private javax.swing.JCheckBox useCableCar;
    private javax.swing.JCheckBox useFerry;
    private javax.swing.JCheckBox useFunicular;
    private javax.swing.JCheckBox useGondola;
    private javax.swing.JCheckBox useLightRail;
    private javax.swing.JCheckBox useRail;
    private javax.swing.JCheckBox useSubway;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent ae) {
        GTFSImportOptions options = this.panel.getOptions();
        
        Set<GTFSTransitType> transitTypes = EnumSet.noneOf(GTFSTransitType.class);
        for (GTFSTransitType transitType : typeToCheckBox.keySet()) {
            if (typeToCheckBox.get(transitType).isSelected()) {
                transitTypes.add(transitType);
            }
        }
        
        options.setTransitTypes(transitTypes);
        
        for (EdgeAlgorithm ea : algorithmToRadioBox.keySet()) {
            if (algorithmToRadioBox.get(ea).isSelected()) {
                options.setEdgeAlgorithm(ea);
                break;
            }
        }
        
        this.panel.setOptions(options);
    }
}
